#pragma once

// only applicable on ESP32-S3
#ifdef USE_ESP32_VARIANT_ESP32S3
#include "esphome/core/component.h"
#include "esphome/components/spi/spi.h"
#include "esphome/components/display/display.h"
#include "esp_lcd_panel_ops.h"
#include "esp_lcd_panel_rgb.h"
#include "driver/spi_master.h"
#include <cinttypes>

namespace esphome {
namespace gc9503v {

constexpr static const char *const TAG = "display.gc9503v";

static const uint8_t GC9503V_DELAY_FLAG = 0xFF;
#define GC9503V_DELAY(ms) ((uint8_t) ((ms) | 0x80)), GC9503V_DELAY_FLAG

class GC9503V : public display::Display {
  public:
    GC9503V(uint8_t const *init_sequence): init_sequence_{init_sequence} {}
    void update() override { this->do_update_(); }
    void setup() override;
    void loop() override;
    float get_setup_priority() const override { return setup_priority::HARDWARE; }
    void draw_pixels_at(int x_start, int y_start, int w, int h, const uint8_t *ptr, display::ColorOrder order,
                        display::ColorBitness bitness, bool big_endian, int x_offset, int y_offset, int x_pad) override;
    void draw_pixel_at(int x, int y, Color color) override;

    display::ColorOrder get_color_mode() { return this->color_mode_; }
    void set_color_mode(display::ColorOrder color_mode) { this->color_mode_ = color_mode; }
    void set_invert_colors(bool invert_colors) { this->invert_colors_ = invert_colors; }

    void add_data_pin(InternalGPIOPin *data_pin, size_t index) { this->data_pins_[index] = data_pin; };
    void set_de_pin(InternalGPIOPin *de_pin) { this->de_pin_ = de_pin; }
    void set_pclk_pin(InternalGPIOPin *pclk_pin) { this->pclk_pin_ = pclk_pin; }
    void set_vsync_pin(InternalGPIOPin *vsync_pin) { this->vsync_pin_ = vsync_pin; }
    void set_hsync_pin(InternalGPIOPin *hsync_pin) { this->hsync_pin_ = hsync_pin; }
    void set_enable_pin(InternalGPIOPin *enable_pin) { this->enable_pin_ = enable_pin; }
    void set_reset_pin(InternalGPIOPin *reset_pin) { this->reset_pin_ = reset_pin; }
    void set_sclk_pin(InternalGPIOPin *sclk_pin) { this->sclk_pin_ = sclk_pin; }
    void set_mosi_pin(InternalGPIOPin *mosi_pin) { this->mosi_pin_ = mosi_pin; }
    void set_width(uint16_t width) { this->width_ = width; }
    void set_dimensions(uint16_t width, uint16_t height) {
      this->width_ = width;
      this->height_ = height;
    }
    int get_width() override;
    int get_height() override;
    void set_hsync_back_porch(uint16_t hsync_back_porch) { this->hsync_back_porch_ = hsync_back_porch; }
    void set_hsync_front_porch(uint16_t hsync_front_porch) { this->hsync_front_porch_ = hsync_front_porch; }
    void set_hsync_pulse_width(uint16_t hsync_pulse_width) { this->hsync_pulse_width_ = hsync_pulse_width; }
    void set_vsync_pulse_width(uint16_t vsync_pulse_width) { this->vsync_pulse_width_ = vsync_pulse_width; }
    void set_vsync_back_porch(uint16_t vsync_back_porch) { this->vsync_back_porch_ = vsync_back_porch; }
    void set_vsync_front_porch(uint16_t vsync_front_porch) { this->vsync_front_porch_ = vsync_front_porch; }
    void set_pclk_frequency(uint32_t pclk_frequency) { this->pclk_frequency_ = pclk_frequency; }
    void set_pclk_inverted(bool inverted) { this->pclk_inverted_ = inverted; }
    void set_offsets(int16_t offset_x, int16_t offset_y) {
      this->offset_x_ = offset_x;
      this->offset_y_ = offset_y;
    }
    display::DisplayType get_display_type() override { return display::DisplayType::DISPLAY_TYPE_COLOR; }
    void dump_config() override;
  protected:
    void send_command_and_data(uint8_t command_byte, const uint8_t *data_bytes, uint8_t num_data_bytes);
    void __spi_send_cmd(uint8_t cmd);
    void __spi_send_data(uint8_t data);
    void rgb_driver_init(const uint8_t *addr);
    void rgb_driver_init_ha();
    uint8_t const *init_sequence_{};
    
    int get_width_internal() override { return this->width_; }
    int get_height_internal() override { return this->height_; }
    void reset_display_() const;
    InternalGPIOPin *de_pin_{nullptr};
    InternalGPIOPin *pclk_pin_{nullptr};
    InternalGPIOPin *hsync_pin_{nullptr};
    InternalGPIOPin *vsync_pin_{nullptr};
    InternalGPIOPin *enable_pin_{nullptr};
    InternalGPIOPin *reset_pin_{nullptr};
    InternalGPIOPin *sclk_pin_{nullptr};
    InternalGPIOPin *mosi_pin_{nullptr};
    InternalGPIOPin *data_pins_[16] = {};
    uint16_t hsync_front_porch_ = 8;
    uint16_t hsync_pulse_width_ = 4;
    uint16_t hsync_back_porch_ = 8;
    uint16_t vsync_front_porch_ = 8;
    uint16_t vsync_pulse_width_ = 4;
    uint16_t vsync_back_porch_ = 8;
    uint32_t pclk_frequency_ = 16 * 1000 * 1000;
    bool pclk_inverted_{true};

    bool invert_colors_{};
    display::ColorOrder color_mode_{display::COLOR_ORDER_BGR};
    size_t width_{0};
    size_t height_{0};
    int16_t offset_x_{0};
    int16_t offset_y_{0};

    esp_lcd_panel_handle_t handle_{};
    spi_device_handle_t g_screen_spi{};
};

// clang-format off
static const uint8_t PROGMEM INITCMD_PANLEE[] = {
  0xF0, 5, 0x55, 0xAA, 0x52, 0x08, 0x00,
  0xF6, 2, 0x5A, 0x87, 
  0xC1, 1, 0x3F,
  0xC2, 1, 0x0E,
  0xC6, 1, 0xF8,
  0xC9, 1, 0x10,
  0xCD, 1, 0x25,
  0xF8, 1, 0x8A,
  0xAC, 1, 0x45,
  0xA0, 1, 0xDD,
  0xA7, 1, 0x47,
  0xFA, 4, 0x00, 0x00, 0x00, 0x04,
  0x86, 4, 0x99, 0xa3, 0xa3, 0x51,
  0xA3, 1, 0xEE,
  0xFD, 3, 0x3c, 0x3c, 0x00,
  0x71, 1, 0x48,
  0x72, 1, 0x48,
  0x73, 2, 0x00, 0x44,
  0x97, 1, 0xEE,
  0x83, 1, 0x93,
  0x9A, 1, 0x72,
  0x9B, 1, 0x5a,
  0x82, 2, 0x2c, 0x2c,
  0xB1, 1, 0x10,
	
  0x6D, 32, 0x00, 0x1F, 0x19, 0x1A,
            0x10, 0x0e, 0x0c, 0x0a,
            0x02, 0x07, 0x1E, 0x1E,
            0x1E, 0x1E, 0x1E, 0x1E,
            0x1E, 0x1E, 0x1E, 0x1E,
            0x1E, 0x1E, 0x08, 0x01,
            0x09, 0x0b, 0x0D, 0x0F,
            0x1a, 0x19, 0x1f, 0x00,
	
  0x64, 16, 0x38, 0x05, 0x01, 0xdb,
            0x03, 0x03, 0x38, 0x04,
            0x01, 0xdc, 0x03, 0x03,
            0x7A, 0x7A, 0x7A, 0x7A,
	
  0x65, 16, 0x38, 0x03, 0x01, 0xdd,
            0x03, 0x03, 0x38, 0x02,
            0x01, 0xde, 0x03, 0x03,
            0x7A, 0x7A, 0x7A, 0x7A,
	
  0x66, 16, 0x38, 0x01, 0x01, 0xdf,
            0x03, 0x03, 0x38, 0x00,
            0x01, 0xe0, 0x03, 0x03,
            0x7A, 0x7A, 0x7A, 0x7A,
	
  0x67, 16, 0x30, 0x01, 0x01, 0xe1,
            0x03, 0x03, 0x30, 0x02,
            0x01, 0xe2, 0x03, 0x03,
            0x7A, 0x7A, 0x7A, 0x7A,
	
  0x68, 13, 0x00, 0x08, 0x15, 0x08,
            0x15, 0x7A, 0x7A, 0x08,
            0x15, 0x08, 0x15, 0x7A,
            0x7A,
	
  0x60,  8, 0x38, 0x08, 0x7A, 0x7A,
            0x38, 0x09, 0x7A, 0x7A,
  0x63,  8, 0x31, 0xe4, 0x7A, 0x7A,
            0x31, 0xe5, 0x7A, 0x7A,
  0x69,  7, 0x04, 0x22, 0x14, 0x22,
            0x14, 0x22, 0x08,
	
  0x6B, 1, 0x07,
  0x7A, 2, 0x08, 0x13,
  0x7B, 2, 0x08, 0x13,

  0xD1, 52, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x12, 0x00, 0x18,
            0x00, 0x21, 0x00, 0x2a,
            0x00, 0x35, 0x00, 0x47,
            0x00, 0x56, 0x00, 0x90,
            0x00, 0xe5, 0x01, 0x68,
            0x01, 0xd5, 0x01, 0xd7,
            0x02, 0x36, 0x02, 0xa6,
            0x02, 0xee, 0x03, 0x48,
            0x03, 0xa0, 0x03, 0xba,
            0x03, 0xc5, 0x03, 0xd0,
            0x03, 0xE0, 0x03, 0xea,
            0x03, 0xFa, 0x03, 0xFF,
  0xD2, 52, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x12, 0x00, 0x18,
            0x00, 0x21, 0x00, 0x2a,
            0x00, 0x35, 0x00, 0x47,
            0x00, 0x56, 0x00, 0x90,
            0x00, 0xe5, 0x01, 0x68,
            0x01, 0xd5, 0x01, 0xd7,
            0x02, 0x36, 0x02, 0xa6,
            0x02, 0xee, 0x03, 0x48,
            0x03, 0xa0, 0x03, 0xba,
            0x03, 0xc5, 0x03, 0xd0,
            0x03, 0xE0, 0x03, 0xea,
            0x03, 0xFa, 0x03, 0xFF,
  0xD3, 52, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x12, 0x00, 0x18,
            0x00, 0x21, 0x00, 0x2a,
            0x00, 0x35, 0x00, 0x47,
            0x00, 0x56, 0x00, 0x90,
            0x00, 0xe5, 0x01, 0x68,
            0x01, 0xd5, 0x01, 0xd7,
            0x02, 0x36, 0x02, 0xa6,
            0x02, 0xee, 0x03, 0x48,
            0x03, 0xa0, 0x03, 0xba,
            0x03, 0xc5, 0x03, 0xd0,
            0x03, 0xE0, 0x03, 0xea,
            0x03, 0xFa, 0x03, 0xFF,
  0xD4, 52, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x12, 0x00, 0x18,
            0x00, 0x21, 0x00, 0x2a,
            0x00, 0x35, 0x00, 0x47,
            0x00, 0x56, 0x00, 0x90,
            0x00, 0xe5, 0x01, 0x68,
            0x01, 0xd5, 0x01, 0xd7,
            0x02, 0x36, 0x02, 0xa6,
            0x02, 0xee, 0x03, 0x48,
            0x03, 0xa0, 0x03, 0xba,
            0x03, 0xc5, 0x03, 0xd0,
            0x03, 0xE0, 0x03, 0xea,
            0x03, 0xFa, 0x03, 0xFF,
  0xD5, 52, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x12, 0x00, 0x18,
            0x00, 0x21, 0x00, 0x2a,
            0x00, 0x35, 0x00, 0x47,
            0x00, 0x56, 0x00, 0x90,
            0x00, 0xe5, 0x01, 0x68,
            0x01, 0xd5, 0x01, 0xd7,
            0x02, 0x36, 0x02, 0xa6,
            0x02, 0xee, 0x03, 0x48,
            0x03, 0xa0, 0x03, 0xba,
            0x03, 0xc5, 0x03, 0xd0,
            0x03, 0xE0, 0x03, 0xea,
            0x03, 0xFa, 0x03, 0xFF,
  0xD6, 52, 0x00, 0x00, 0x00, 0x04,
            0x00, 0x12, 0x00, 0x18,
            0x00, 0x21, 0x00, 0x2a,
            0x00, 0x35, 0x00, 0x47,
            0x00, 0x56, 0x00, 0x90,
            0x00, 0xe5, 0x01, 0x68,
            0x01, 0xd5, 0x01, 0xd7,
            0x02, 0x36, 0x02, 0xa6,
            0x02, 0xee, 0x03, 0x48,
            0x03, 0xa0, 0x03, 0xba,
            0x03, 0xc5, 0x03, 0xd0,
            0x03, 0xE0, 0x03, 0xea,
            0x03, 0xFa, 0x03, 0xFF,

  0x3a, 1, 0x66,
  0x11, 0,
  GC9503V_DELAY(120),
  0x29, 0,
  0x00
};

// clang-format off
static const uint8_t PROGMEM INITCMD_VIEWE[] = {
  0xF0, 5, 0x55, 0xAA, 0x52, 0x08, 0x00,
  0xF6, 2, 0x5A, 0x87,
  0xC1, 1, 0x3F,
  0xCD, 1, 0x25,
  0xC9, 1, 0x10,
  0xF8, 1, 0x8A,
  0xAC, 1, 0x45,
  0xA7, 1, 0x47,
  0xA0, 1, 0xDD, //0xFF 20200413 James
  0x87, 3, 0x04, 0x03, 0x66,
  0x86, 4, 0x99, 0xa3, 0xa3, 0x51, //0X71 20200413 James
  0xFA, 4, 0x08, 0x08, 0x08, 0x04,
  0x9A, 1, 0x8a,  //4A
  0x9B, 1, 0x62,  //22
  0x82, 2, 0x48, 0x48,  //08-08

  0xB1, 1, 0x10,
  0x7A, 2, 0x13, 0x1A,
  0x7B, 2, 0x13, 0x1A,
  0x6D, 32, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x02, 0x0b, 0x01, 0x00, 0x1f, 0x1e, 0x09, 0x0f, 0x1e, 0x1e, 0x1e, 0x1e,
            0x10, 0x0a, 0x1e, 0x1f, 0x00, 0x08, 0x0b, 0x02, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e, 0x1e,
  0x64, 16, 0x18, 0x07, 0x01, 0xE7, 0x03, 0x03, 0x18, 0x06, 0x01, 0xE6, 0x03, 0x03, 0x7a, 0x7a, 0x7a, 0x7a,
  0x65, 16, 0x58, 0x26, 0x18, 0x2c, 0x03, 0x03, 0x58, 0x26, 0x18, 0x2c, 0x03, 0x03, 0x7a, 0x7a, 0x7a, 0x7a,
  0x66, 16, 0x58, 0x26, 0x18, 0x2c, 0x03, 0x03, 0x58, 0x26, 0x18, 0x2c, 0x03, 0x03, 0x7a, 0x7a, 0x7a, 0x7a,
  0x67, 16, 0x18, 0x05, 0x01, 0xE5, 0x03, 0x03, 0x18, 0x04, 0x01, 0xE4, 0x03, 0x03, 0x7a, 0x7a, 0x7a, 0x7a,
  0x60, 8, 0x18, 0x09, 0x7A, 0x7A, 0x51, 0xF1, 0x7A, 0x7A,
  0x63, 8, 0x51, 0xF1, 0x7A, 0x7A, 0x18, 0x08, 0x7A, 0x7A,
  0xD1, 52, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x31, 0x00, 0x4E, 0x00, 0x67, 0x00, 0x92, 0x00, 0xB5, 0x00, 0xED, 0x01, 0x1C,
            0x01, 0x66, 0x01, 0xA4, 0x02, 0x04, 0x02, 0x53, 0x02, 0x56, 0x02, 0x9F, 0x02, 0xF3, 0x03, 0x29, 0x03, 0x73,
            0x03, 0xA1, 0x03, 0xB9, 0x03, 0xC8, 0x03, 0xDB, 0x03, 0xE7, 0x03, 0xF4, 0x03, 0xFB, 0x03, 0XFF,
  0xD2, 52, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x31, 0x00, 0x4E, 0x00, 0x67, 0x00, 0x92, 0x00, 0xB5, 0x00, 0xED, 0x01, 0x1C,
            0x01, 0x66, 0x01, 0xA4, 0x02, 0x04, 0x02, 0x53, 0x02, 0x56, 0x02, 0x9F, 0x02, 0xF3, 0x03, 0x29, 0x03, 0x73,
            0x03, 0xA1, 0x03, 0xB9, 0x03, 0xC8, 0x03, 0xDB, 0x03, 0xE7, 0x03, 0xF4, 0x03, 0xFB, 0x03, 0XFF,
  0xD3, 52, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x31, 0x00, 0x4E, 0x00, 0x67, 0x00, 0x92, 0x00, 0xB5, 0x00, 0xED, 0x01, 0x1C,
            0x01, 0x66, 0x01, 0xA4, 0x02, 0x04, 0x02, 0x53, 0x02, 0x56, 0x02, 0x9F, 0x02, 0xF3, 0x03, 0x29, 0x03, 0x73,
            0x03, 0xA1, 0x03, 0xB9, 0x03, 0xC8, 0x03, 0xDB, 0x03, 0xE7, 0x03, 0xF4, 0x03, 0xFB, 0x03, 0XFF,
  0xD4, 52, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x31, 0x00, 0x4E, 0x00, 0x67, 0x00, 0x92, 0x00, 0xB5, 0x00, 0xED, 0x01, 0x1C,
            0x01, 0x66, 0x01, 0xA4, 0x02, 0x04, 0x02, 0x53, 0x02, 0x56, 0x02, 0x9F, 0x02, 0xF3, 0x03, 0x29, 0x03, 0x73,
            0x03, 0xA1, 0x03, 0xB9, 0x03, 0xC8, 0x03, 0xDB, 0x03, 0xE7, 0x03, 0xF4, 0x03, 0xFB, 0x03, 0XFF,
  0xD5, 52, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x31, 0x00, 0x4E, 0x00, 0x67, 0x00, 0x92, 0x00, 0xB5, 0x00, 0xED, 0x01, 0x1C,
            0x01, 0x66, 0x01, 0xA4, 0x02, 0x04, 0x02, 0x53, 0x02, 0x56, 0x02, 0x9F, 0x02, 0xF3, 0x03, 0x29, 0x03, 0x73,
            0x03, 0xA1, 0x03, 0xB9, 0x03, 0xC8, 0x03, 0xDB, 0x03, 0xE7, 0x03, 0xF4, 0x03, 0xFB, 0x03, 0XFF,
  0xD6, 52, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x31, 0x00, 0x4E, 0x00, 0x67, 0x00, 0x92, 0x00, 0xB5, 0x00, 0xED, 0x01, 0x1C,
            0x01, 0x66, 0x01, 0xA4, 0x02, 0x04, 0x02, 0x53, 0x02, 0x56, 0x02, 0x9F, 0x02, 0xF3, 0x03, 0x29, 0x03, 0x73,
            0x03, 0xA1, 0x03, 0xB9, 0x03, 0xC8, 0x03, 0xDB, 0x03, 0xE7, 0x03, 0xF4, 0x03, 0xFB, 0x03, 0XFF,
  0x11, 0,
  GC9503V_DELAY(120),
  0x29, 0,
  GC9503V_DELAY(20),
  0x00
};

class GC9503VPANLEE : public GC9503V {
  public:
    GC9503VPANLEE() : GC9503V(INITCMD_PANLEE) {}
};

class GC9503VVIEWE : public GC9503V {
  public:
    GC9503VVIEWE() : GC9503V(INITCMD_VIEWE) {}
};

}  // namespace gc9503v
}  // namespace esphome
#endif